# --------------------------------------------------------------------
# Load secrets from `.env`
#   - Ensure `.env` exists locally and is never committed
#   - Provide strong values:
#       SECRET_KEY: 32+ chars, any printable characters
#       API_TOKEN:  20+ chars, strictly alphanumeric
# --------------------------------------------------------------------

import sys
import logging
from pathlib import Path
from typing import Any

from pydantic import BaseSettings, Field, SecretStr, ValidationError, validator

# Configure logger for configuration stage
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stderr)],
)
logger = logging.getLogger("config")


class Settings(BaseSettings):
    SECRET_KEY: SecretStr = Field(
        ...,
        min_length=32,
        description="32+ character secret key for signing",
    )
    API_TOKEN: SecretStr = Field(
        ...,
        min_length=20,
        regex=r"^[A-Za-z0-9]+$",
        description="20+ character alphanumeric API token",
    )

    @validator("SECRET_KEY")
    def check_secret_key_length(cls, v: SecretStr) -> SecretStr:
        value = v.get_secret_value()
        if len(value) < 32:
            raise ValueError("SECRET_KEY must be at least 32 characters long")
        return v

    @validator("API_TOKEN")
    def check_api_token_strict(cls, v: SecretStr) -> SecretStr:
        token = v.get_secret_value()
        if not token.isalnum():
            raise ValueError("API_TOKEN must be strictly alphanumeric")
        return v

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = True


def load_settings() -> Settings:
    """
    Load settings and exit gracefully on validation failure.
    """
    env_path = Path(".env")
    if not env_path.exists():
        logger.error("Missing `.env` file. Please create it and set SECRET_KEY and API_TOKEN.")
        sys.exit(1)

    try:
        return Settings()
    except ValidationError as e:
        logger.error("Configuration error:\n%s", e)
        sys.exit(1)


# Initialize settings on import
settings = load_settings()

# Access secrets (avoid logging the actual values)
secret_key: str = settings.SECRET_KEY.get_secret_value()
api_token: str = settings.API_TOKEN.get_secret_value()

logger.info("âœ… Configuration loaded successfully (secrets hidden)")
